{"version":3,"sources":["SearchMovies.js","reportWebVitals.js","index.js"],"names":["SearchMovies","useState","query","setQuery","movies","setMovies","console","log","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","length","id","poster_path","title","overview","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","movie","map","src","alt","release_date","vote_average","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Main","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA0DeA,MAxDf,WAAyB,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGOF,mBAAS,IAHhB,mBAGdG,EAHc,KAGNC,EAHM,KAIrBC,QAAQC,IAAIH,GACZ,IAAMI,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBACIC,EAFY,kHAEqGV,EAFrG,iDAKGW,MAAMD,GALT,cAKTE,EALS,gBAMIA,EAAIC,OANR,cAMTC,EANS,iBAOOA,EAAKC,QAPZ,cAOTA,EAPS,QAQFC,OAAS,GARP,kCASNb,EAAUW,EAAKC,SATT,QAUZX,QAAQC,IAAIU,EAAQC,QAVR,wBAaZb,EADkB,CAAC,CAACc,GAAI,IAAKC,YAAc,mCAAoCC,MAAO,aAAcC,SAAW,yCAZnG,0DAgBfhB,QAAQC,IAAR,MAhBe,0DAAH,sDAoBlB,OACG,qCACA,uBAAMgB,UAAU,OAAOC,SAAUhB,EAAjC,UACG,uBAAOiB,QAAQ,QAAQF,UAAU,UACjC,uBAAOG,KAAK,OAAOC,KAAK,QAAQJ,UAAU,QACvCK,YAAY,oBACZC,MAAO3B,EAAO4B,SAAU,SAACrB,GAAD,OAAON,EAASM,EAAEsB,OAAOF,UAEpD,wBAAQH,KAAK,SAASH,UAAU,SAAhC,uBAEA,qBAAKA,UAAU,YAAf,SACQnB,EAAO4B,QAAO,SAAAC,GAAK,OAAIA,EAAMb,eAAac,KAAI,SAAAD,GAAK,OAChD,sBAAKV,UAAU,OAAf,UACI,qBAAKA,UAAU,cACXY,IAAG,yDAAoDF,EAAMb,aAC7DgB,IAAKH,EAAMZ,MAAQ,YAEvB,sBAAKE,UAAU,gBAAf,UACA,oBAAIA,UAAU,cAAd,SAA6BU,EAAMZ,QACnC,4BAAG,mDAAsBY,EAAMI,kBAC9B,4BAAG,6CAAgBJ,EAAMK,kBACzB,mBAAGf,UAAU,aAAb,SAA2BU,EAAMX,gBATXW,EAAMd,aC3BtCoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRQ,E,uKAEF,OACE,sBAAKzB,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,W,GALW0B,IAAMC,WAUzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.b8ffe47b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nfunction SearchMovies() {\r\n   \r\n   const [query, setQuery] = useState('');\r\n   const [movies, setMovies] = useState([]);\r\n   console.log(movies)\r\n   const searchMovies = async (e) => {\r\n      e.preventDefault();\r\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=324c3a95be625de22fa0d97d8f4df471&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n      try {\r\n         const res = await fetch(url);\r\n         const data = await res.json();\r\n         const results = await data.results;\r\n         if ( results.length > 0){\r\n            await setMovies(data.results);\r\n            console.log(results.length)\r\n         } else {\r\n            const noResults = [{id: \"0\", poster_path : \"/q0ZdIhd9Zb8mu3E6GFMSBoNqzYl.jpg\", title: \"No Results\", overview : \"Sorry we could not find any results\" }]\r\n            setMovies(noResults);\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n      <form className=\"form\" onSubmit={searchMovies}>\r\n         <label htmlFor=\"query\" className=\"label\"></label>\r\n         <input type=\"text\" name=\"query\" className=\"input\"\r\n            placeholder=\"ie: jurassic park\"\r\n            value={query} onChange={(e) => setQuery(e.target.value)}\r\n         />\r\n         <button type=\"submit\" className=\"button\">Search</button>\r\n         </form>\r\n         <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <div className=\"card\" key={movie.id}>\r\n                        <img className=\"card--image\"\r\n                            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2${movie.poster_path}`}\r\n                            alt={movie.title + ' poster'}\r\n                            />\r\n                        <div className=\"card--content\">\r\n                        <h3 className=\"card--title\">{movie.title}</h3>\r\n                        <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                         <p><small>RATING: {movie.vote_average}</small></p>\r\n                         <p className=\"card--desc\">{movie.overview}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>  \r\n         </>\r\n   )\r\n}\r\n\r\nexport default SearchMovies;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SearchMovies from './SearchMovies';\nimport reportWebVitals from './reportWebVitals';\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">React Movie Search</h1>\n        <SearchMovies/>\n      </div>\n    )\n  }\n}\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}