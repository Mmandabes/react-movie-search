{"version":3,"sources":["SearchMovies.js","reportWebVitals.js","index.js"],"names":["SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","movie","poster_path","map","src","alt","title","release_date","vote_average","overview","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Main","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAoDeA,MAlDf,WAAyB,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGOF,mBAAS,IAHhB,mBAGdG,EAHc,KAGNC,EAHM,KAKfC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBACFC,QAAQC,IAAI,cACNC,EAHY,kHAGqGV,EAHrG,iDAMGW,MAAMD,GANT,cAMTE,EANS,gBAOIA,EAAIC,OAPR,cAOTC,EAPS,iBAQTX,EAAUW,EAAKC,SARN,0DAUfP,QAAQC,IAAR,MAVe,0DAAH,sDAclB,OACG,qCACA,uBAAMO,UAAU,OAAOC,SAAUb,EAAjC,UACG,uBAAOc,QAAQ,QAAQF,UAAU,UACjC,uBAAOG,KAAK,OAAOC,KAAK,QAAQJ,UAAU,QACvCK,YAAY,oBACZC,MAAOtB,EAAOuB,SAAU,SAAClB,GAAD,OAAOJ,EAASI,EAAEmB,OAAOF,UAEpD,wBAAQH,KAAK,SAASH,UAAU,SAAhC,uBAEA,qBAAKA,UAAU,YAAf,SACQd,EAAOuB,QAAO,SAAAC,GAAK,OAAIA,EAAMC,eAAaC,KAAI,SAAAF,GAAK,OAChD,sBAAKV,UAAU,OAAf,UACI,qBAAKA,UAAU,cACXa,IAAG,0DAAqDH,EAAMC,aAC9DG,IAAKJ,EAAMK,MAAQ,YAEvB,sBAAKf,UAAU,gBAAf,UACA,oBAAIA,UAAU,cAAd,SAA6BU,EAAMK,QACnC,4BAAG,mDAAsBL,EAAMM,kBAC9B,4BAAG,6CAAgBN,EAAMO,kBACzB,mBAAGjB,UAAU,aAAb,SAA2BU,EAAMQ,gBATXR,EAAMS,aCrBtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRQ,E,uKAEF,OACE,sBAAK7B,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,W,GALW8B,IAAMC,WAUzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.fb738ed1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nfunction SearchMovies() {\r\n   \r\n   const [query, setQuery] = useState('');\r\n   const [movies, setMovies] = useState([]);\r\n\r\n   const searchMovies = async (e) => {\r\n      e.preventDefault();\r\n      console.log(\"submitting\");\r\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=324c3a95be625de22fa0d97d8f4df471&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n      try {\r\n         const res = await fetch(url);\r\n         const data = await res.json();\r\n         await setMovies(data.results)\r\n      } catch (err) {\r\n         console.log(err);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n      <form className=\"form\" onSubmit={searchMovies}>\r\n         <label htmlFor=\"query\" className=\"label\"></label>\r\n         <input type=\"text\" name=\"query\" className=\"input\"\r\n            placeholder=\"ie: jurassic park\"\r\n            value={query} onChange={(e) => setQuery(e.target.value)}\r\n         />\r\n         <button type=\"submit\" className=\"button\">Search</button>\r\n         </form>\r\n         <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <div className=\"card\" key={movie.id}>\r\n                        <img className=\"card--image\"\r\n                            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                            alt={movie.title + ' poster'}\r\n                            />\r\n                        <div className=\"card--content\">\r\n                        <h3 className=\"card--title\">{movie.title}</h3>\r\n                        <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                         <p><small>RATING: {movie.vote_average}</small></p>\r\n                         <p className=\"card--desc\">{movie.overview}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>  \r\n         </>\r\n   )\r\n}\r\n\r\nexport default SearchMovies;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SearchMovies from './SearchMovies';\nimport reportWebVitals from './reportWebVitals';\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">React Movie Search</h1>\n        <SearchMovies/>\n      </div>\n    )\n  }\n}\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}